package presentation;

import JPAEntities.DoctorEntity;
import JPAEntities.Specialization;
import appointment.system.AppointmentManager;
import appointment.system.AppointmentStatus;
import appointment.system.IAppointmentManager;
import appointment.system.NewAppointmentDTO;
import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JDateChooserCellEditor;
import com.toedter.calendar.JDayChooser;
import doctor.system.ExistentDoctorDTO;
import doctor.system.IDoctorDAO;
import doctor.system.NewDoctorDTO;
import factory.Factory;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import patient.system.ExistentPatientDTO;
import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JDateChooserCellEditor;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author TeLesheo
 */
public class JFrameRegisterAppointment extends javax.swing.JFrame {

    private ExistentPatientDTO paciente;
    private List<ExistentDoctorDTO> doctores;
    private ExistentDoctorDTO existentDoctorDTO;
    private JDateChooser dateChooser;
    private List<Calendar> limitDays;

//    private JDateChooser dateChooser;
    /**
     * Creates new form ConfirmaciondeCita
     */
    public JFrameRegisterAppointment(ExistentPatientDTO paciente) {
        this.paciente = paciente;
        
        initComponents();
        dateChooser();
        limitarFecha();
        this.cmbDoctor.setVisible(false);
        limitDays = new ArrayList<>();
    }

    public void dateChooser(){
        
        dateChooser = new JDateChooser();
        dateChooser.setBounds(lblFecha.getBounds());
        this.add(dateChooser);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        cmbDoctor = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtNota = new javax.swing.JTextField();
        cbxSpecialization = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Register Appointment");

        jButton1.setText("Next");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        cmbDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDoctor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbDoctorMouseClicked(evt);
            }
        });
        cmbDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDoctorActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel11.setText("Doctores");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel12.setText("Date ");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel13.setText("Note...");

        cbxSpecialization.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FAMILY",   "PEDIATRIC",
            "SURGERY",
            "PSYCHIATRY",
            "ANESTHIOLOGY",
            "CARDIOLGY"}));
cbxSpecialization.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        cbxSpecializationActionPerformed(evt);
    }
    });

    jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
    jLabel14.setText("Specialization");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(209, 209, 209)
                    .addComponent(jLabel1))
                .addGroup(layout.createSequentialGroup()
                    .addGap(121, 121, 121)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(161, 161, 161)
                    .addComponent(jLabel14))
                .addGroup(layout.createSequentialGroup()
                    .addGap(121, 121, 121)
                    .addComponent(cmbDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(94, 94, 94)
                    .addComponent(cbxSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(121, 121, 121)
                    .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(121, 121, 121)
                    .addComponent(jLabel12))
                .addGroup(layout.createSequentialGroup()
                    .addGap(121, 121, 121)
                    .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(121, 121, 121)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(121, 121, 121)
                    .addComponent(txtNota, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(169, 169, 169)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(129, 129, 129)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(221, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(14, 14, 14)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(64, 64, 64)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel11)
                .addComponent(jLabel14))
            .addGap(6, 6, 6)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(cmbDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cbxSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(6, 6, 6)
            .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jLabel12)
            .addGap(12, 12, 12)
            .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jLabel13)
            .addGap(6, 6, 6)
            .addComponent(txtNota, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(65, 65, 65)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jButton2)
                .addComponent(jButton1)))
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        
        
        limitDays();
        List<Calendar> dias = limitDays;
        for(Calendar calendar: limitDays){
            
            if(dateChooser.getCalendar().get(Calendar.MONTH) == calendar.get(Calendar.MONTH)){
                
                if(dateChooser.getCalendar().get(Calendar.DAY_OF_MONTH) == calendar.get(Calendar.DAY_OF_MONTH)){
                    
                    if(dateChooser.getCalendar().get(Calendar.YEAR) == calendar.get(Calendar.YEAR)){
                        
                        JOptionPane.showMessageDialog(this, "This date has already been set aside");
                        return;
                        
                    }
                    
                }
                
                
            }
            
        }
//        Calendar calendar = Calendar.getInstance();

        NewAppointmentDTO newAppointmentDTO = new NewAppointmentDTO();
        newAppointmentDTO.setDoctor(existentDoctorDTO);
        newAppointmentDTO.setPatient(paciente);
        newAppointmentDTO.setStatus(AppointmentStatus.ACTIVE);
        newAppointmentDTO.setAppointmentDate(dateChooser.getCalendar());

        IAppointmentManager appointmentManager = Factory.getAppointmentManager();
        appointmentManager.createAppointment(newAppointmentDTO);

        JFrameConfirmAppointment confirm = new JFrameConfirmAppointment();
        confirm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        //    JFrameInitialPatient menu = new JFrameInitialPatient(control, idPatient);
        //    menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmbDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDoctorActionPerformed
        // TODO add your handling code here:
        
//        limitDays = 
        
        existentDoctorDTO = (ExistentDoctorDTO) cmbDoctor.getSelectedItem();

    }//GEN-LAST:event_cmbDoctorActionPerformed

    private void cbxSpecializationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSpecializationActionPerformed
        // TODO add your handling code here:
        Specialization specializationEnum = Specialization.PEDIATRIC;
        IDoctorDAO doctorDAO = Factory.getDoctorDAO();

        String selectedSpecialization = (String) cbxSpecialization.getSelectedItem();
        doctores = doctorDAO.searchBySpecialization(specializationEnum.StringToEnum(selectedSpecialization));
        cmbDoctor.removeAllItems();
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        cmbDoctor.setModel(model);
        for (ExistentDoctorDTO doctor : doctores) {
            model.addElement(doctor);
        }
        this.cmbDoctor.setVisible(true);
        

    }//GEN-LAST:event_cbxSpecializationActionPerformed

    public void limitDays(){
        
        IAppointmentManager appointmentManager = Factory.getAppointmentManager();
        IDoctorDAO doctorDAO = Factory.getDoctorDAO();
        ExistentDoctorDTO existentDoctor = (ExistentDoctorDTO)cmbDoctor.getSelectedItem();
        DoctorEntity doctorEntity = doctorDAO.ExistentDtoToEntity(existentDoctor);
        if(appointmentManager.findLimitDays(doctorEntity)!=null){


        limitDays = appointmentManager.findLimitDays(doctorEntity);
        }
    }
    
    private void cmbDoctorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbDoctorMouseClicked
        // TODO add your handling code here:
        if(cmbDoctor.getSize() != null){

            limitDays();
        }
            
        System.out.println("click");
        
    }//GEN-LAST:event_cmbDoctorMouseClicked

//    private void crearDateChooser() {
//
////        dateChooser = new JDateChooser();
////        dateChooser.setBounds(171, 143, 142, 26);
////        add(dateChooser);
//    }

    public void deleteDaysApart(){
//        JDateChooser ola = new JDateChooser();
//         DateCellEditor cellEditor = new JDateChooserCellEditor(dateChooser);
//        cellEditor.setSelectableDates(date -> !disabledDates.contains(date)); // Deshabilitar fechas en la lista
//
//        // Establecer el DateCellEditor personalizado en el JDateChooser
//        dateChooser.setDateFormatString("dd-MM-yyyy");
//        dateChooser.setCellEditor(cellEditor);
        
    }
    
    public void limitarFecha(){
//        dateChooser.remove(2);
        Calendar fechaMinima = Calendar.getInstance();
        fechaMinima.set(Calendar.DATE, 1);
        Date minimo = fechaMinima.getTime();
        
        Calendar fechaMaxima = Calendar.getInstance();
        fechaMaxima.add(Calendar.YEAR, 2);
        Date maximo = fechaMaxima.getTime();
        
        
        dateChooser.setSelectableDateRange(minimo, maximo);
        
    }

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(JFrameConfirmAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(JFrameConfirmAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(JFrameConfirmAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(JFrameConfirmAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new JFrameConfirmAppointment().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbxSpecialization;
    private javax.swing.JComboBox<String> cmbDoctor;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JTextField txtNota;
    // End of variables declaration//GEN-END:variables
}
